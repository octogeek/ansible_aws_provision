- name: make a keypair with the specified name
  ec2_key:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    name: "{{ key_name }}"
    region: "{{ aws_region }}"
    wait: yes
  register: key_data

- name: save the key file to local host
  copy:
    content: "{{ key_data.key.private_key }}"
    dest: keys/private.key
    mode: 0600
  when: key_data.key.private_key|default(0)

- name: create vpc
  ec2_vpc:
    state: present
    cidr_block: 10.1.0.0/16
    resource_tags: { "Name":"main" }
    subnets:
      - cidr: 10.1.10.0/24
        az: "{{ aws_region }}a"
        resource_tags: { "Name":"dmz", "Type" : "Web" }
      - cidr: 10.1.20.0/24
        az: "{{ aws_region }}b"
        resource_tags: { "Name":"database", "Type" : "Web" }
    internet_gateway: True
    route_tables:
      - subnets:
          - 10.1.10.0/24
          - 10.1.20.0/24
        routes:
          - dest: 0.0.0.0/0
            gw: "igw"
    region: "{{ aws_region }}"
  register: info_vpc

- name: dmz set fact
  set_fact:
    web_subnet_id: "{{ item.id }}"
  when: item['resource_tags']['Name'] == 'dmz' and item['az'] == "{{ aws_region}}a"
  with_items: info_vpc['subnets']


- name: Create the common sec
  ec2_group:
    name: Common-sec
    description: "ansible generated common group"
    region: "{{ aws_region }}"
    vpc_id: "{{ info_vpc.vpc_id }}"
    rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
    rules_egress:
        - proto: all
          cidr_ip: "0.0.0.0/0"
  register: common_securitygroup

- name: create the sec for Proxy
  ec2_group:
    name: Proxy-sec
    description: "ansible generated group for Proxy"
    region: "{{ aws_region }}"
    vpc_id: "{{ info_vpc.vpc_id }}"
    rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
    rules_egress:
        - proto: all
          cidr_ip: "0.0.0.0/0"
  register: proxy_securitygroup

- name: create the security group for Redis
  ec2_group:
    name: Redis-sec
    description: "ansible generated group for Redis"
    region: "{{ aws_region }}"
    vpc_id: "{{ info_vpc.vpc_id }}"
    rules:
        - proto: tcp
          from_port: 6379
          to_port: 6379
          group_name: Proxy-sec
          group_desc: For Proxy-sec
    rules_egress:
        - proto: all
          cidr_ip: "0.0.0.0/0"
  register: redis_securitygroup

- name: create the security group for RDS
  ec2_group:
    name: RDS-sec
    description: "ansible generated group for RDS"
    region: "{{ aws_region }}"
    vpc_id: "{{ info_vpc.vpc_id }}"
    rules:
        - proto: tcp
          from_port: 3306
          to_port: 3306
          group_name: AdminApp-sec
          group_desc: For AdminApp
        - proto: tcp
          from_port: 3306
          to_port: 3306
          group_name: BlogApp-sec
          group_desc: For BlogApp
    rules_egress:
        - proto: all
          cidr_ip: "0.0.0.0/0"
  register: rds_securitygroup

- name: create the security group for AdminApp
  ec2_group:
    name: AdminApp-sec
    description: "ansible generated group for AdminApp"
    region: "{{ aws_region }}"
    vpc_id: "{{ info_vpc.vpc_id }}"
    rules:
        - proto: tcp
          from_port: 8000
          to_port: 8000
          group_name: Proxy-sec
          group_desc: For Proxy-sec
    rules_egress:
        - proto: all
          cidr_ip: "0.0.0.0/0"
  register: admin_securitygroup


- name: create the security group for BlogApp
  ec2_group:
    name: BlogApp-sec
    description: "ansible generated group for BlogApp"
    region: "{{ aws_region }}"
    vpc_id: "{{ info_vpc.vpc_id }}"
    rules:
        - proto: tcp
          from_port: 8000
          to_port: 8000
          group_name: Proxy-sec
          group_desc: For Proxy-sec
    rules_egress:
        - proto: all
          cidr_ip: "0.0.0.0/0"
  register: blog_securitygroup


- name: create the security group for Monitoring
  ec2_group:
    name: Monitor-sec
    description: "ansible generated group for Monitoring"
    region: "{{ aws_region }}"
    vpc_id: "{{ info_vpc.vpc_id }}"
    rules:
        - proto: tcp
          from_port: 3000
          to_port: 3000
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 5672
          to_port: 5672
          cidr_ip: 10.1.10.0/24
    rules_egress:
        - proto: all
          cidr_ip: "0.0.0.0/0"
  register: monitor_securitygroup